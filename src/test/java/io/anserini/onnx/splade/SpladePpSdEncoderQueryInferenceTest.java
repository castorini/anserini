package io.anserini.onnx.splade;

import ai.onnxruntime.*;
import ai.onnxruntime.OrtSession.Result;

import org.apache.commons.io.FileUtils;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertArrayEquals;

public class SpladePpSdEncoderQueryInferenceTest {
    static private final String MODEL_URL = "https://dl.dropboxusercontent.com/s/ac0gwqab5lmmus2/spladePpSd.onnx?dl=0";
    static private final String MODEL_NAME = "spladePpSdEncoder.onnx";

    Object[][] examples = new Object[][] {
            { new long[] { 101, 2029, 18714, 7457, 13853, 3798, 1999, 1996, 2668, 1029, 102 },
                    new float[] { 0.6254983f, 1.5603197f, 0.09017516f, 0.14612895f, 1.0984355f, 0.30427256f, 1.7450469f,
                            1.048453f, 0.15550739f, 0.036518656f, 0.83926964f, 1.1836277f, 0.09972344f, 0.1789666f,
                            0.296445f, 0.30558705f, 0.10164783f, 0.26623452f, 0.4247307f, 0.040116295f, 0.3627509f,
                            0.005290081f, 0.22477376f, 0.007204505f, 0.55063605f, 0.3163682f, 0.22796513f, 3.0862637f,
                            0.3120929f, 0.19684292f, 0.05517114f, 0.17269576f, 0.49208906f, 0.017472275f, 0.16942318f,
                            0.07009328f, 0.31386802f, 0.50030375f, 0.25244808f, 0.007105557f, 0.0882054f, 2.3794322f,
                            0.2115507f, 1.9676603f, 0.54072034f, 0.101211384f, 0.35485375f, 0.14405388f,
                            0.45879734f } },

            { new long[] { 101, 2054, 2024, 1996, 2350, 2576, 4243, 1999, 2307, 3725, 1029, 7276, 2035, 2008, 6611,
                    1012, 102 },
                    new float[] { 0.089513734f, 0.053033244f, 0.14792164f, 0.29028f, 0.4546563f, 1.5292941f, 1.684901f,
                            1.129658f, 1.5305877f, 0.49334076f, 0.106042795f, 0.03555125f, 0.29644543f, 0.14211649f,
                            0.07248615f, 0.77336013f, 1.3267013f, 0.23678245f, 0.16282596f, 0.35207653f, 0.4165544f,
                            1.0882487f, 0.32702494f, 0.17213401f, 0.13243331f, 0.101231426f, 0.33493724f, 0.11862319f,
                            0.17121802f, 0.0327726f, 0.014439378f, 0.879915f, 0.51310384f, 0.16154027f, 0.121614754f,
                            1.9811225f, 0.014603747f, 0.33238342f, 0.25223923f, 0.3304181f, 0.41801193f, 0.32678965f,
                            0.6800701f, 0.018319927f, 1.7389376f, 0.032208305f, 0.7641494f, 0.03549142f, 0.04531077f,
                            0.2630862f, 0.6423309f, 0.4457268f, 0.032063775f, 0.07908208f, 0.6804497f, 0.032375433f,
                            0.01142f, 0.55620414f, 0.068335176f, 0.11416206f, 0.38404086f, 1.0646763f, 0.29894966f,
                            0.149151f, 0.565498f, 0.08382545f, 0.8947444f, 0.21543638f, 0.43520704f, 0.077154554f,
                            0.3808507f, 0.125935f, 0.32912412f, 1.3347211f, 0.5881796f, 0.362454f, 0.32023135f,
                            0.108704075f, 0.22727072f } },

            { new long[] { 101, 2054, 2828, 1997, 4736, 2515, 8611, 2227, 1999, 1051, 1010, 2888, 1996, 5592, 1997,
                    1996, 23848, 2072, 102 },
                    new float[] { 0.68816066f, 0.48742545f, 0.34779903f, 0.009594636f, 0.104539365f, 0.48723686f,
                            0.040794145f, 0.0035249975f, 0.68595576f, 0.021730771f, 0.08821053f, 0.26805738f,
                            0.68783593f, 0.05541839f, 1.319273f, 0.063077375f, 0.118621595f, 0.14199208f, 0.83944803f,
                            0.26417622f, 0.69450545f, 0.068192884f, 0.051538143f, 0.5969242f, 0.73426205f, 1.7875574f,
                            0.7522353f, 0.13224836f, 0.45271796f, 0.56249094f, 0.23100272f, 0.16374975f, 0.06510369f,
                            0.56640875f, 0.031327758f, 0.47769427f, 0.46168816f, 0.052692447f, 1.4952561f, 0.057766587f,
                            0.35668063f, 0.4433629f, 0.0913359f, 0.31205592f, 0.5155385f, 0.26438764f, 1.4483486f,
                            0.19727422f, 0.25343448f, 0.05691953f, 0.05170072f, 0.095627904f, 0.4809879f, 0.396794f,
                            0.034277454f, 0.6400752f, 0.2704788f, 0.39100993f, 0.17471461f, 0.23553254f, 0.10676859f,
                            2.3959548f, 0.3417559f, 0.1698589f, 0.8063442f, 1.1116167f, 0.089357086f, 0.30034345f,
                            0.11123181f, 0.044480342f, 0.1988716f, 0.040955156f, 1.4240928f } },

            { new long[] { 101, 9375, 1024, 20248, 2078, 102 },
                    new float[] { 0.033956364f, 2.5938447f, 0.08753688f, 0.04150322f, 0.15377037f, 0.25983343f,
                            0.16626008f, 0.09094065f, 0.05444178f, 0.07977752f, 0.11970263f, 0.47497532f, 0.408138f,
                            0.3078783f, 0.36535823f, 0.46849802f, 0.42302126f, 0.23341085f, 0.17136839f, 0.051191173f,
                            0.20384887f, 0.34754583f, 0.15116347f, 0.16336896f, 0.18586843f, 0.04541763f, 0.10948779f,
                            0.05463436f, 0.08377326f, 0.058403797f, 0.24060674f, 0.058443606f, 0.1625521f, 0.016718635f,
                            1.2975216f, 0.23733096f, 0.0302976f, 0.75310713f, 0.004603028f, 0.20371526f, 0.4934057f,
                            0.064634345f, 0.36022598f, 0.042105503f, 0.14232247f, 0.064539686f, 0.06564281f,
                            0.27543277f, 0.006286134f, 0.2705874f, 0.24068882f, 0.007739084f, 0.11632571f, 0.17171292f,
                            0.113246515f, 0.28380227f, 0.13634452f, 0.0133285f, 0.52782446f, 0.3083446f, 0.3621638f,
                            0.024359796f, 0.25281495f, 0.2466882f, 0.15489945f, 0.3597272f, 0.84625906f, 0.0037933076f,
                            0.1675396f, 0.33999595f, 0.015039506f, 0.044282835f, 0.87234914f, 0.1991431f, 0.09647247f,
                            0.13486028f, 3.1588173f, 0.4135144f } },

            { new long[] { 101, 2043, 2024, 1996, 2176, 2749, 2008, 2552, 2006, 2019, 13297, 1999, 14442, 1029, 102 },
                    new float[] { 0.87346584f, 0.026708277f, 0.07060217f, 0.2544765f, 0.8867797f, 0.09488789f,
                            0.27397114f, 0.035691936f, 0.06602487f, 0.17472883f, 1.9734064f, 0.22531186f, 0.31818077f,
                            1.568363f, 1.1716986f, 0.19967182f, 0.34860048f, 0.14484926f, 0.22120915f, 0.10654132f,
                            2.0822425f, 0.20054924f, 0.49688858f, 1.6266143f, 0.28755888f, 0.11276782f, 1.0556843f,
                            0.1320336f, 0.1695248f, 0.69100565f, 0.06912256f, 0.17011598f, 0.38408974f, 0.09744286f,
                            0.7522783f, 0.27523902f, 0.30401585f, 0.15423954f, 0.009007061f, 0.046989232f, 0.07499241f,
                            0.32220742f, 0.19358596f, 0.10604869f, 0.2962612f, 0.7913194f, 0.32517108f, 0.24941774f,
                            0.13920106f, 0.00087628106f, 0.22784781f, 1.0985849f, 0.50649256f, 0.006896857f,
                            0.027920678f, 0.69029546f, 0.4882831f, 0.13900398f, 0.03278679f, 0.2081861f, 0.08972626f,
                            0.03414878f, 0.15140644f, 0.4417658f, 0.16272059f, 0.08772505f, 0.042518705f, 0.26969117f,
                            0.04700231f, 0.16960208f, 0.22937874f, 0.071736574f, 0.19177644f, 0.14288737f, 0.7958441f,
                            0.012946597f, 0.15264963f, 0.11731584f, 0.20748499f, 0.30368155f, 0.26220575f, 0.2879947f,
                            0.2699925f, 0.09535431f, 0.017351609f, 0.24111108f, 1.8074279f, 0.3160308f, 0.1954491f,
                            2.2804222f, 0.3950714f, 0.1685457f, 0.030298524f, 0.072165444f, 0.098770484f,
                            0.17063515f } },

            { new long[] { 101, 2129, 2146, 2024, 2057, 9530, 15900, 6313, 2044, 2057, 4608, 1037, 3147, 1012, 1029,
                    102 },
                    new float[] { 0.089323506f, 1.215632f, 0.35586786f, 0.23622303f, 0.31129766f, 2.0024674f,
                            0.5662189f, 0.56165296f, 0.05294472f, 0.6916514f, 0.14287725f, 0.4958453f, 0.19481887f,
                            0.018269828f, 0.32682422f, 1.9791698f, 0.12458076f, 0.229604f, 0.7444765f, 0.057945363f,
                            0.039084952f, 1.1681241f, 0.16094016f, 0.5838579f, 0.041890375f, 0.118154794f, 0.0993738f,
                            1.4192648f, 0.12549588f, 0.1619746f, 0.1478731f, 0.62147474f, 0.0075559537f, 0.44944137f,
                            0.20789778f, 0.7046433f, 0.040501244f, 0.40301332f, 0.91294193f, 0.6336799f, 0.050945595f,
                            0.03823924f, 0.4055805f, 1.5588285f, 0.36848286f, 0.38316643f, 0.25117615f } },

            { new long[] { 101, 1996, 7450, 2008, 21312, 1996, 13474, 2038, 1996, 2157, 2000, 2019, 4905, 2003, 1996,
                    1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 7450, 1012, 102 },
                    new float[] { 0.093961254f, 0.39769816f, 0.04251322f, 0.22698195f, 0.095369264f, 1.2322452f,
                            0.32869712f, 0.021716073f, 0.51524806f, 0.025084564f, 0.15594372f, 1.1680398f, 0.039822504f,
                            0.20050631f, 0.41953668f, 0.2909055f, 0.63613415f, 0.26129243f, 0.42789784f, 0.4686786f,
                            0.057957962f, 0.24467708f, 0.14935255f, 0.0067374916f, 0.30419305f, 0.20018573f, 0.6169921f,
                            0.0027299777f, 0.07413714f, 0.12871532f, 1.0668354f, 0.046217684f, 2.1221998f, 1.6375023f,
                            0.0063971267f, 0.23509304f, 1.1759843f, 0.06905013f, 0.16905962f, 0.24345334f, 0.03785675f,
                            0.17217816f, 0.14451782f, 0.21748535f, 2.1792092f, 0.059429236f, 0.7408165f, 0.041833904f,
                            0.3948101f, 0.3415655f, 0.27098322f, 0.37405303f, 0.0960709f, 0.30225867f, 0.2025049f,
                            0.437928f, 0.65551305f, 0.03034617f, 0.4286109f, 1.3858142f, 0.24716455f, 0.84597284f,
                            1.6881101f, 0.992313f, 0.12707378f, 1.0717839f, 0.18504857f, 0.08918111f, 0.5392258f } },

            { new long[] { 101, 2054, 2001, 11534, 1005, 1055, 4602, 6691, 2000, 12761, 3399, 1029, 102 },
                    new float[] { 0.058909006f, 0.4426486f, 0.5547057f, 0.5578472f, 0.32442433f, 0.31669092f,
                            0.05018945f, 0.36074722f, 0.0056326007f, 0.05303279f, 0.2526794f, 0.3634946f, 0.04514043f,
                            0.42993936f, 0.09619792f, 0.054694403f, 0.19372682f, 0.28068987f, 0.3378018f, 0.14814997f,
                            0.1383473f, 0.032285985f, 0.68601865f, 0.13012174f, 1.3871646f, 0.00543296f, 0.14704454f,
                            0.44695505f, 0.4166028f, 0.22993729f, 0.045049496f, 0.17880431f, 0.40717945f, 1.8417504f,
                            0.073206455f, 0.022769436f, 0.34261855f, 0.19736563f, 0.20965946f, 0.03612723f, 1.308824f,
                            0.08005539f, 0.6672766f, 0.093702406f, 1.5751114f, 0.14820918f, 0.2932133f, 0.22241859f,
                            1.6998763f, 0.10753529f, 1.9474031f, 0.30682808f, 0.024232626f, 0.6454936f, 0.38480738f,
                            0.25141546f, 0.30218956f, 0.10012063f, 0.1125548f, 0.069557115f, 0.12625247f, 0.8207865f,
                            0.001713238f, 0.523638f, 0.02054622f, 0.03697335f, 0.28882292f, 0.016757205f, 2.8913896f,
                            0.21666442f, 1.6584749f, 0.13110667f, 0.4021743f, 0.11737203f, 0.06466474f, 0.3225743f,
                            0.13293076f } },

            { new long[] { 101, 2019, 5983, 8761, 2003, 7356, 2011, 1035, 1035, 1035, 1035, 1035, 1012, 102 },
                    new float[] { 0.31008744f, 0.85963166f, 0.8246976f, 1.5442243f, 0.92088354f, 0.41420105f,
                            0.6120731f, 0.15399706f, 0.08532529f, 0.3384642f, 1.1644104f, 0.021301886f, 0.3143459f,
                            1.1186666f, 0.43416497f, 0.14131364f, 0.4303076f, 0.025252542f, 0.5365025f, 0.21548462f,
                            1.6410623f, 1.7081165f, 0.008568547f, 0.25381127f, 0.09499479f, 0.14289759f, 0.6221644f,
                            1.6623021f, 0.23295331f, 0.056831237f, 0.030134516f, 0.052678876f, 0.6636208f, 2.5928884f,
                            0.09940942f, 0.41538247f, 2.753958f, 0.19751348f, 0.2820831f, 0.057380803f, 0.3689355f,
                            1.4176297f, 0.27100188f, 0.09512845f, 0.4155458f, 0.0015100754f, 0.19811514f, 2.1259508f,
                            0.66813356f, 0.15314193f, 0.45411026f, 0.15115169f, 0.1583808f, 0.22546154f, 1.7072585f,
                            0.20289192f, 0.6330929f, 0.12939374f, 0.1297921f, 0.25416997f, 0.16769326f, 0.11449264f,
                            0.017689556f, 0.20159888f, 0.12352133f, 0.0985899f, 0.030434754f, 0.14246266f, 0.15703581f,
                            0.4105614f, 0.025668584f, 0.46992972f } },

            { new long[] { 101, 2054, 8915, 8737, 2079, 2017, 5660, 15960, 24494, 2015, 2006, 1999, 1996, 17428, 1029,
                    1998, 2005, 2129, 2146, 1029, 102 },
                    new float[] { 0.537269f, 0.60950714f, 0.53006476f, 1.0760677f, 0.041114308f, 0.10386567f,
                            1.4467155f, 0.20568901f, 1.917263f, 1.4740344f, 0.2690912f, 0.8028377f, 0.6487733f,
                            0.3767232f, 0.7414563f, 0.08998626f, 2.2210176f, 0.13414052f, 0.06689513f, 1.3880699f,
                            0.8659248f, 0.09546993f, 1.1474577f, 0.13628483f, 1.8181382f } },

            { new long[] { 101, 2029, 18672, 8844, 26450, 6740, 16896, 2006, 1996, 4942, 15782, 14289, 8017, 1042,
                    21842, 1997, 1996, 8040, 9331, 7068, 1998, 19274, 2015, 2006, 1996, 8276, 7270, 21769, 1997, 1996,
                    20368, 7946, 1029, 102 },
                    new float[] { 0.19154035f, 0.18651225f, 0.16455168f, 0.18202572f, 0.29742643f, 0.030481007f,
                            0.06277839f, 0.06803018f, 0.3411217f, 0.10880459f, 0.48635167f, 0.0631875f, 0.4262755f,
                            0.4878648f, 0.40699157f, 0.39837506f, 0.5434439f, 0.30117434f, 0.19776842f, 1.170203f,
                            0.7573074f, 0.12647425f, 0.15032408f, 0.058599886f, 0.59743017f, 0.22398329f, 0.13891165f,
                            0.19806106f, 0.33129117f, 0.5670643f, 0.37590104f, 0.16104387f, 0.9959705f, 1.354392f,
                            0.79276055f, 0.60651237f, 0.7852082f, 0.09300974f, 1.0736141f, 0.9003519f, 0.7060847f,
                            0.7166797f, 0.6231909f, 0.059397332f, 0.48248684f, 0.6690253f, 0.022909839f, 0.93763626f,
                            0.22879818f, 0.522305f, 0.05385875f, 0.21069938f, 0.39752853f, 0.91734344f, 0.20783406f,
                            0.37216786f, 0.19353881f, 0.7161918f, 0.39131588f, 0.9468266f, 0.38999397f, 0.3271738f,
                            1.2345297f, 0.9148336f, 0.19307446f, 1.1238052f, 0.2694564f, 0.67912096f, 1.1532902f,
                            0.2994385f, 0.3522233f, 0.15532358f, 1.4914014f, 0.74533635f } },
    };

    static private String getCacheDir() {
        File cacheDir = new File("~/.cache/anserini/test");
        if (!cacheDir.exists()) {
            cacheDir.mkdir();
        }
        return cacheDir.getPath();
    }

    static private Path getEncoderModelPath() throws IOException {
        File modelFile = new File(getCacheDir(), MODEL_NAME);
        FileUtils.copyURLToFile(new URL(MODEL_URL), modelFile);
        return modelFile.toPath();
    }

    @Test
    public void basic() throws OrtException, IOException {
        String modelPath = getEncoderModelPath().toString();
        try (OrtEnvironment env = OrtEnvironment.getEnvironment();
                OrtSession.SessionOptions options = new OrtSession.SessionOptions();
                OrtSession session = env.createSession(modelPath, options)) {

            for (Object[] example : examples) {
                long[] inputIds = (long[]) example[0];
                float[] expectedOutputs = (float[]) example[1];

                Map<String, OnnxTensor> inputs = new HashMap<>();
                long[][] tokenIds = new long[1][inputIds.length];
                long[][] tokenTypeIdsTensor = new long[1][inputIds.length];
                long[][] attentionMaskTensor = new long[1][inputIds.length];
                Arrays.fill(attentionMaskTensor[0], 1);
                tokenIds[0] = inputIds;
                inputs.put("input_ids", OnnxTensor.createTensor(env, tokenIds));
                inputs.put("token_type_ids", OnnxTensor.createTensor(env, tokenTypeIdsTensor));
                inputs.put("attention_mask", OnnxTensor.createTensor(env, attentionMaskTensor));
                try (Result results = session.run(inputs)) {
                    float[] computedWeights = flatten(results.get("q_rep").get().getValue());
                    computedWeights = getNonzero(computedWeights);
                    assertArrayEquals(expectedOutputs, computedWeights, 1e-5f);
                }
            }
        }
    }

    private float[] getNonzero(float[] input) {
        /* 
         * This function removes the zero padding from the output of the model.
        */
        List<Float> output = new ArrayList<>();
        for (float f : input) {
            if (f != 0) {
                output.add(f);
            }
        }
        return toArray(output);
    }

    private float[] flatten(Object obj) {
        /* 
         * This function flattens the list of lists into a single list of floats.
        */
        List<Float> weightsList = new ArrayList<>();
        Object[] inputs = (Object[]) obj;
        for (Object input : inputs) {
            float[] weights = (float[]) input;
            for (float weight : weights) {
                weightsList.add(weight);
            }
        }
        return toArray(weightsList);
    }

    private float[] toArray(List<Float> input) {
        float[] output = new float[input.size()];
        for (int i = 0; i < output.length; i++) {
            output[i] = input.get(i);
        }
        return output;
    }
}