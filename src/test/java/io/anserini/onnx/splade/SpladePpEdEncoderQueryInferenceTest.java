package io.anserini.onnx.splade;

import ai.onnxruntime.*;
import ai.onnxruntime.OrtSession.Result;

import org.apache.commons.io.FileUtils;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertArrayEquals;

public class SpladePpEdEncoderQueryInferenceTest {
    static private final String MODEL_URL = "https://dl.dropboxusercontent.com/s/8eq7pjkm1lrwe1r/spladePpEd.onnx?dl=0";
    static private final String MODEL_NAME = "spladePpEdEncoder.onnx";

    Object[][] examples = new Object[][] {
            { new long[] { 101, 2029, 18714, 7457, 13853, 3798, 1999, 1996, 2668, 1029, 102 },
                    new float[] { 0.7955845f, 1.6830633f, 1.289546f, 0.1728402f, 1.8474301f, 0.47887146f, 0.56969446f,
                            0.036582217f, 1.0409305f, 0.0952338f, 0.023718089f, 0.33500358f, 0.030936716f, 0.5053201f,
                            0.3865659f, 0.13753572f, 0.029624395f, 2.726598f, 1.7740623f, 0.05839559f, 0.52086246f,
                            2.5654473f, 0.09836217f, 2.0933828f, 0.22954507f, 0.72711366f, 0.3479621f } },

            { new long[] { 101, 2054, 2024, 1996, 2350, 2576, 4243, 1999, 2307, 3725, 1029, 7276, 2035, 2008, 6611,
                    1012, 102 },
                    new float[] { 0.14769551f, 0.16949804f, 0.23474891f, 0.105927534f, 0.44418484f, 0.07724759f,
                            0.19157085f, 1.5968051f, 1.284131f, 1.2554959f, 0.093334034f, 1.3755292f, 0.37944353f,
                            0.2630643f, 0.12348593f, 0.13497122f, 0.4657679f, 1.3067877f, 0.20110999f, 0.033473782f,
                            0.17012614f, 0.013639703f, 0.36164418f, 1.3408391f, 0.32971385f, 0.034203846f, 0.051039506f,
                            0.04854077f, 0.514805f, 0.61843795f, 0.17119561f, 0.4887839f, 0.13297626f, 1.1947488f,
                            0.38021037f, 0.29290912f, 0.3337252f, 0.0101161385f, 0.036730345f, 0.31103432f, 0.32895917f,
                            0.664548f, 1.5809808f, 0.12412042f, 1.0443854f, 0.034136795f, 0.104467206f, 0.55190647f,
                            0.23820725f, 0.23240912f, 0.09202482f, 0.2422285f, 0.9379728f, 0.29282174f, 0.45334026f,
                            0.8360233f, 0.47990885f, 0.105663076f, 0.4984448f, 0.8225995f, 0.34429988f, 0.07948249f,
                            0.1384372f, 0.048544515f } },

            { new long[] { 101, 2054, 2828, 1997, 4736, 2515, 8611, 2227, 1999, 1051, 1010, 2888, 1996, 5592, 1997,
                    1996, 23848, 2072, 102 },
                    new float[] { 0.74042016f, 0.40673888f, 0.41499114f, 0.044481024f, 0.21848959f, 0.055099167f,
                            0.5336623f, 0.26491517f, 0.27261975f, 0.09129825f, 0.16264655f, 0.29880244f, 1.2537855f,
                            0.013436009f, 0.060807038f, 0.5100819f, 0.6872806f, 0.40286353f, 0.74806875f, 0.9838408f,
                            1.5287129f, 0.40067446f, 0.59334475f, 0.45380303f, 0.13934253f, 0.40032864f, 0.23416072f,
                            1.742213f, 0.08391259f, 0.07751613f, 1.3425682f, 0.0880909f, 0.37026286f, 0.57012886f,
                            2.335375f, 0.7543898f, 1.3447691f, 0.2094663f, 0.03607951f, 1.586593f } },

            { new long[] { 101, 9375, 1024, 20248, 2078, 102 },
                    new float[] { 0.020789571f, 0.08622705f, 0.16900809f, 2.626677f, 0.13668293f, 0.07545825f,
                            0.3001061f, 0.5761213f, 0.4010797f, 0.41791946f, 0.27982318f, 0.31148082f, 0.100691f,
                            0.15033156f, 0.7773398f, 0.033296227f, 0.14086974f, 0.04963626f, 0.16929446f, 0.23112203f,
                            0.2450481f, 0.35070387f, 0.52849615f, 0.084181f, 0.0922403f, 0.017718015f, 0.38285294f,
                            0.06387115f, 0.19538596f, 0.021579701f, 0.20123798f, 0.5946762f, 0.20478539f, 0.108625695f,
                            0.29174623f, 0.14790139f, 1.2746168f, 0.47782993f, 0.0015138844f, 0.21308874f, 0.072216794f,
                            0.01070495f, 0.62254745f, 0.18787017f, 0.026747737f, 0.00747254f, 0.87107503f, 0.03483978f,
                            0.055797044f, 0.39843827f, 0.32331735f, 0.18513197f, 0.24772963f, 0.45369217f, 0.43807206f,
                            0.06990155f, 0.30506596f, 0.21396188f, 0.45597738f, 0.28356513f, 0.18362738f, 0.28479752f,
                            1.1077837f, 0.004801885f, 0.34058288f, 0.05172528f, 0.33340204f, 0.244902f, 0.75574744f,
                            0.12813984f, 3.1922574f, 0.50601315f
                    } },

            { new long[] { 101, 2043, 2024, 1996, 2176, 2749, 2008, 2552, 2006, 2019, 13297, 1999, 14442, 1029, 102 },
                    new float[] { 1.2173715f, 0.024254851f, 0.2994825f, 0.77062404f, 0.06634386f, 1.8404663f,
                            1.5258013f, 1.3097736f, 0.20956647f, 0.30950266f, 1.9214542f, 0.030492801f, 0.12871374f,
                            0.5071051f, 1.1631453f, 1.0646272f, 0.17272595f, 0.3431098f, 0.845797f, 0.11881014f,
                            0.13473494f, 0.18046816f, 0.26291564f, 0.2586108f, 0.08944779f, 0.04225293f, 0.27529126f,
                            0.6096229f, 0.13806616f, 0.19720483f, 0.17014997f, 1.2812717f, 0.16544285f, 1.0472779f,
                            0.6125687f, 0.31289363f, 0.23293622f, 0.09061612f, 0.086546116f, 0.21198882f, 0.13188858f,
                            1.445543f, 0.6557725f, 0.16424896f, 0.42223537f, 1.1019937f, 0.3981543f, 0.25715113f,
                            2.1812637f, 0.25581187f, 0.026261317f, 0.12745605f, 0.01295248f, 0.19257726f, 0.42181352f
                    } },

            { new long[] { 101, 2129, 2146, 2024, 2057, 9530, 15900, 6313, 2044, 2057, 4608, 1037, 3147, 1012, 1029,
                    102 },
                    new float[] { 0.17626984f, 1.1717954f, 0.6671373f, 0.32015043f, 0.03080784f, 1.1661133f,
                            0.22229423f, 2.137373f, 0.06375349f, 0.10880673f, 0.00045765893f, 0.95257545f, 0.1515802f,
                            0.028028948f, 0.31305945f, 0.15716347f, 1.8053882f, 0.29373422f, 0.022225114f, 0.3137102f,
                            0.8221814f, 1.0034947f, 0.07060873f, 1.1084238f, 0.12933184f, 0.5750698f, 0.6368546f,
                            0.11042706f, 1.0530831f, 0.427644f, 0.39279044f, 0.3942116f, 1.5852914f, 0.121261284f,
                            0.7007507f, 0.35716102f
                    } },

            { new long[] { 101, 1996, 7450, 2008, 21312, 1996, 13474, 2038, 1996, 2157, 2000, 2019, 4905, 2003, 1996,
                    1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 7450, 1012, 102 },
                    new float[] { 0.24155273f, 0.8787404f, 0.55347806f, 0.28091088f, 0.15759581f, 0.9651888f,
                            0.5808613f, 0.00883976f, 0.09166704f, 1.1471359f, 0.6166422f, 0.0806138f, 0.5826396f,
                            0.2027466f, 0.23114397f, 0.41225395f, 2.0651777f, 1.4861063f, 0.18748194f, 0.27171826f,
                            1.0481114f, 0.19139299f, 0.52559525f, 0.51208156f, 2.3180616f, 0.41578832f, 0.5687703f,
                            0.42205614f, 0.84510374f, 1.5393679f, 0.7722852f, 0.095532015f, 0.027158748f, 0.8649357f,
                            1.0209969f, 0.12162901f
                    } },

            { new long[] { 101, 2054, 2001, 11534, 1005, 1055, 4602, 6691, 2000, 12761, 3399, 1029, 102 },
                    new float[] { 0.8389575f, 0.11172158f, 0.5502358f, 0.031660087f, 0.32405153f, 0.42506915f,
                            0.0017951103f, 0.16259314f, 0.07521048f, 0.036030527f, 0.40674388f, 0.11693804f,
                            0.10981714f, 0.26455975f, 0.027410122f, 0.1523469f, 0.056821663f, 0.021588918f, 0.36717132f,
                            0.7606148f, 1.1409148f, 0.49590084f, 0.16755998f, 0.038913205f, 0.5103472f, 0.220358f,
                            0.051648527f, 1.7097802f, 0.32602f, 1.1873155f, 1.2933558f, 0.487175f, 0.825235f,
                            0.18502557f, 1.586793f, 1.9396282f, 0.096523665f, 0.0126354145f, 0.1788048f, 0.07447646f,
                            0.21465907f, 0.4918357f, 0.90574694f, 0.10848057f, 0.73624676f, 0.46276885f, 0.42374676f,
                            0.11414632f, 2.7350192f, 1.7402294f
                    } },

            { new long[] { 101, 2019, 5983, 8761, 2003, 7356, 2011, 1035, 1035, 1035, 1035, 1035, 1012, 102 },
                    new float[] { 1.0285407f, 0.9092548f, 0.27386978f, 0.016006075f, 0.7345073f, 0.028887274f,
                            1.4610046f, 0.0011123191f, 0.6116318f, 0.18104534f, 0.16142637f, 0.1946501f, 0.57793593f,
                            0.15055165f, 1.1459434f, 0.028066736f, 1.1064943f, 0.5326714f, 1.4385587f, 1.9874882f,
                            0.3049184f, 0.44486904f, 0.5446069f, 0.209571f, 0.115523346f, 0.6649833f, 2.5249164f,
                            0.006651405f, 0.011458303f, 0.11196484f, 0.009339689f, 0.48632303f, 2.7532103f, 0.04722828f,
                            0.18865298f, 1.7161832f, 0.26227447f, 1.8146552f, 0.8214511f, 0.3547515f, 0.04428785f,
                            0.42930597f, 0.1279263f, 1.7330663f, 0.19900712f, 0.19109564f, 0.39726692f, 0.17623457f,
                            0.516677f, 0.21554506f, 0.09071618f, 0.31855986f
                    } },

            { new long[] { 101, 2054, 8915, 8737, 2079, 2017, 5660, 15960, 24494, 2015, 2006, 1999, 1996, 17428, 1029,
                    1998, 2005, 2129, 2146, 1029, 102 },
                    new float[] { 0.12432625f, 0.52627695f, 0.925741f, 0.7873426f, 0.8214844f, 1.393641f, 1.4402341f,
                            0.55415994f, 0.37437567f, 0.9398385f, 1.1362226f, 1.0401897f, 0.055463165f, 0.13190436f,
                            1.8458539f, 0.25235704f, 0.45627254f, 1.3504479f, 0.18828185f, 0.1685334f, 0.19503291f,
                            0.0927777f, 1.9148916f, 0.0031711787f
                    } },

            { new long[] { 101, 2029, 18672, 8844, 26450, 6740, 16896, 2006, 1996, 4942, 15782, 14289, 8017, 1042,
                    21842, 1997, 1996, 8040, 9331, 7068, 1998, 19274, 2015, 2006, 1996, 8276, 7270, 21769, 1997, 1996,
                    20368, 7946, 1029, 102 },
                    new float[] { 0.20649078f, 0.2274993f, 0.14492692f, 0.123065025f, 0.22290768f, 0.4029318f,
                            0.9576938f, 0.14664711f, 0.12397142f, 0.862048f, 0.09439241f, 0.3449815f, 0.3512152f,
                            0.48513782f, 0.9465585f, 0.9444189f, 0.21513696f, 0.36443675f, 0.029964466f, 0.06649077f,
                            0.068723105f, 0.2940365f, 0.91531944f, 1.3573269f, 0.4439754f, 0.7961941f, 0.0068592085f,
                            0.9054027f, 0.64897734f, 0.6140045f, 0.599235f, 0.54976904f, 0.66603744f, 0.79340285f,
                            0.19413139f, 0.13392408f, 0.029120728f, 0.7014195f, 0.9385311f, 0.054962084f, 0.088572055f,
                            0.10812863f, 1.1521662f, 0.19241618f, 0.43758857f, 1.0107635f, 0.19736533f, 0.34736538f,
                            0.7764079f, 0.56430006f, 0.028285434f, 1.2583563f, 0.2788779f, 0.060075603f
                    } },
    };

    static private String getCacheDir() {
        File cacheDir = new File("~/.cache/anserini/test");
        if (!cacheDir.exists()) {
            cacheDir.mkdir();
        }
        return cacheDir.getPath();
    }

    static private Path getEncoderModelPath() throws IOException {
        File modelFile = new File(getCacheDir(), MODEL_NAME);
        FileUtils.copyURLToFile(new URL(MODEL_URL), modelFile);
        return modelFile.toPath();
    }

    @Test
    public void basic() throws OrtException, IOException {
        String modelPath = getEncoderModelPath().toString();
        try (OrtEnvironment env = OrtEnvironment.getEnvironment();
                OrtSession.SessionOptions options = new OrtSession.SessionOptions();
                OrtSession session = env.createSession(modelPath, options)) {

            for (Object[] example : examples) {
                long[] inputIds = (long[]) example[0];
                float[] expectedOutputs = (float[]) example[1];

                Map<String, OnnxTensor> inputs = new HashMap<>();
                long[][] tokenIds = new long[1][inputIds.length];
                long[][] tokenTypeIdsTensor = new long[1][inputIds.length];
                long[][] attentionMaskTensor = new long[1][inputIds.length];
                Arrays.fill(attentionMaskTensor[0], 1);
                tokenIds[0] = inputIds;
                inputs.put("input_ids", OnnxTensor.createTensor(env, tokenIds));
                inputs.put("token_type_ids", OnnxTensor.createTensor(env, tokenTypeIdsTensor));
                inputs.put("attention_mask", OnnxTensor.createTensor(env, attentionMaskTensor));
                try (Result results = session.run(inputs)) {
                    float[] computedWeights = flatten(results.get("q_rep").get().getValue());
                    computedWeights = getNonzero(computedWeights);
                    assertArrayEquals(expectedOutputs, computedWeights, 1e-5f);
                }
            }
        }
    }

    private float[] getNonzero(float[] input) {
        /*
         * This function removes the zero padding from the output of the model.
         */
        List<Float> output = new ArrayList<>();
        for (float f : input) {
            if (f != 0) {
                output.add(f);
            }
        }
        return toArray(output);
    }

    private float[] flatten(Object obj) {
        /*
         * This function flattens the list of lists into a single list of floats.
         */
        List<Float> weightsList = new ArrayList<>();
        Object[] inputs = (Object[]) obj;
        for (Object input : inputs) {
            float[] weights = (float[]) input;
            for (float weight : weights) {
                weightsList.add(weight);
            }
        }
        return toArray(weightsList);
    }

    private float[] toArray(List<Float> input) {
        float[] output = new float[input.size()];
        for (int i = 0; i < output.length; i++) {
            output[i] = input.get(i);
        }
        return output;
    }
}